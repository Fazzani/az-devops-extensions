name: $(SourceBranchName)_$(date:yyyyMMdd)$(rev:.r)
pool:
  vmImage: ubuntu-latest

parameters:
- name: 'extensions'
  type: object
  default:
  - name: "promote artifact"
    id: prom-art
    visibility: 'public' # private,public
  - name: "Release variables updater"
    id: "release-vars-updater"
    visibility: 'public'

pr:
  branches:
    include:
    - master
    - main
    - develop
    - refs/tags/v*
  paths:
    exclude:
    - docs/*
    - README.md
    - azure-pipelines-test.yml

trigger:
  branches:
    include:
    - master
    - main
    - develop
    - refs/tags/v*
  paths:
    exclude:
    - docs/*
    - README.md
    - azure-pipelines-test.yml

variables:
- name: node_version
  value: "10.x"
- name: tfx_version
  value: "v0.8.x"
- name: PublisherID
  value: "synker"
- name: marketplace_service_conn
  value: vs_marketplace
# - name: ArtifactName
#   value: task
# - name: "ExtensionID"
#   value: "prom-art"
# - name: "ExtensionName"
#   value: "promote artifact"
# - name: EXT_VERSION
#   value: "1.0.0"

stages:
- stage: Build
  jobs:
  - job:
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - task: NodeTool@0
      inputs:
        versionSpec: $(node_version)
    - task: Npm@1
      displayName: 'Install'
      inputs:
        command: 'custom'
        customCommand: 'run initdev'
    - task: Npm@1
      displayName: 'Lint'
      continueOnError: true
      inputs:
        command: custom
        verbose: false
        customCommand: 'run lint'
    - task: Npm@1
      displayName: 'Build'
      inputs:
        command: custom
        verbose: false
        customCommand: 'run build'
    - script: |
       export ENDPOINT_AUTH_PARAMETER_SYSTEMVSSCONNECTION_ACCESSTOKEN=$(PAT_HENI_FAZZANI_ARTIFACTS)
       npm run tests
      displayName: 'Test'
    - task: PublishTestResults@2
      displayName: 'Publish tests results'
      enabled: false
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/ResultsFile.xml'
    - task: SnykSecurityScan@0
      displayName: Security Scan
      inputs:
        serviceConnectionEndpoint: 'snyk'
        testType: 'app'
        severityThreshold: 'medium'
        monitorOnBuild: false
        additionalArguments: '--all-projects --detection-depth=6'
        failOnIssues: false
        projectName: 'as-tasks'

- stage: Package
  condition: and(succeeded(), startsWith('Build.SourceBranch', 'refs/tags/*'))
  dependsOn: Build
  jobs:
  - job:
    steps:
      - task: TfxInstaller@3
        inputs:
          version: $(tfx_version)
      - task: Npm@1
        displayName: 'Install Node dependencies'
        inputs:
          command: 'custom'
          customCommand: 'run initdev'
      - task: Bash@3
        displayName: Compile Javascript
        inputs:
          targetType: "inline"
          script: |
            tsc
      - ${{ each p in parameters.extensions }}:
          - task: QueryAzureDevOpsExtensionVersion@3
            continueOnError: true
            displayName: Get Extension Version
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: '$(marketplace_service_conn)'
              publisherId: '$(PublisherID)'
              extensionId: '${{ parameters.id }}'
              versionAction: 'Patch'
              outputVariable: 'Task.Extension.Version'
              # extensionVersionOverride: 'EXT_VERSION'
              setBuildNumber: true
          - task: PackageAzureDevOpsExtension@3
            inputs:
              rootFolder: '$(System.DefaultWorkingDirectory)'
              publisherId: '$(PublisherID)'
              extensionId: '${{ p.id }}'
              extensionName: '${{ p.name }}'
              extensionVersion: '$(Task.Extension.Version)'
              extensionTag: '-build'
              updateTasksVersion: true
              updateTasksVersionType: 'patch'
              extensionVisibility: ${{ p.visibility  }}
              extensionPricing: 'free'
          - task: CopyFiles@2
            displayName: "Copy Files to: $(Build.ArtifactStagingDirectory)"
            inputs:
              Contents: "**/*.vsix"
              TargetFolder: "$(Build.ArtifactStagingDirectory)"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: ${{ p.id }}
              publishLocation: 'Container'

- stage: Publish
  dependsOn: Package
  condition: and(succeeded(), startsWith('Build.SourceBranch', 'refs/tags/*'))
  jobs:
    - job:
      steps:
        - task: TfxInstaller@3
          inputs:
            version: $(tfx_version)
        - ${{ each p in parameters.extensions }}:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: '${{ p.id }}'
              downloadPath: "$(System.DefaultWorkingDirectory)"
          - task: PublishAzureDevOpsExtension@3
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: '$(marketplace_service_conn)'
              fileType: 'vsix'
              vsixFile: './${{ p.id }}/$(PublisherID).*.vsix'
              publisherId: '$(PublisherID)'
              extensionId: '${{ p.id }}'
              extensionName: '${{ p.name }}'
              updateTasksVersion: false
              extensionVisibility: '${{ p.visibility }}'
              extensionPricing: 'free'